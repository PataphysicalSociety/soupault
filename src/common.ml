(* Types *)

(* The page datastructure that page processing functions receive.
 *)
type page_data = {
  (* Page file path as it is on disk.
     Or, for virtual pages generated by Lua index processors,
     as it would be if the page existed on disk.
   *)
  page_file: string;

  (* The parsed element tree. *)
  element_tree: Soup.soup Soup.node;

  (* The navigation path of a page is its logical path in the website structure.
     The reason for this concept is that it can be different
     from the directory path.
     For example, for [site/foo/bar/index.html], the navigation path is [foo]
     because including [bar] in it would make that page to have links to itself.
   *)
  nav_path : string list;

  (* Target dir before its possible modification by the pre-parse hook. *)
  orig_target_dir: string;

  (* Actual target dir, possibly modified by the pre-pase hook *)
  target_dir: string;

  (* The file where the processed page is saved. *)
  target_file: string;

  (* Intended page URL:
     depending on settings.clean_urls
     it may or may not include the file name. *)
  url: string;
}

(* Page path filtering options
   for widgets, index views, and other things
   that people may want to apply only to some pages.
  *)
type path_options = {
  pages: string list;
  sections: string list;
  regexes: string list;
  pages_exclude: string list;
  sections_exclude: string list;
  regexes_exclude: string list;
  include_subsections: bool;
}

(* Index field extraction rule. *)
type index_field = {
  field_name : string;

  (* CSS selectors for elements to extract data from. *)
  field_selectors : string list;

  (* Select all matching elements into a list,
     rather than just the first one. *)
  select_all : bool;

  default_field_value : string option;

  (* By default, soupault extracts element content
     for the index field.
     This option allows to extract an attribute value instead. *)
  extract_attribute : string option;

  (* Extract element content if extract_attribute is set
     but the element has no such attribute. *)
  fallback_to_content : bool;

  (* Fail the build if any page doesn't have this field. *)
  required_field : bool;
}

(* A (logic-capable) template. As of 5.x, soupault uses Jingoo
   for its template engine.
 *)
type template = Jingoo.Jg_template.Loaded.t

(* The many ways to render the site index. *)
type index_processor =
  | (* Render every index entry individually using a template.
       This is a holdover from the times
       when soupault only supported logicless templates.
       Still handy if someone wants to just render all entries
       in the same way.
     *)
    IndexItemTemplate of template
  | (* Render the whole index view using a single template
       and let it loop through the entries as it wants.
       Handy if someone wants custom entry filtering or grouping.
     *) 
    IndexTemplate of template
  | (* Send a JSON dump of the index to an external executable's stdin
       and insert its stdout into the page. *)
    ExternalIndexer of string
  | (* Render the index using a Lua script.
       The first argument is the Lua source code and the second argument
       if the script file name.
     *)
    LuaIndexer of (string * string)

(* Index entry sort type. *)
type sort_type =
  | Calendar
  | Numeric
  | Lexicographic

(* Index entry sort options. *)
type sort_options = {
  (* Index field to use as the sort key. *)
  sort_by : string option;

  (* Sort type, the default is calendar. *)
  sort_type : sort_type;

  (* The default order is descending,
     because a lot of the time website indices are sorted by date,
     from newer to older.
   *)
  sort_descending : bool;

  (* Fail the website build on sorting errors
     such as undefined fields.
   *)
  sort_strict : bool;
}

(* An index view defined how to render an index.
   The user can display multiple views on different pages,
   or even on the same page
   (e.g., recent entries and entries by category).
 *)
type index_view = {
  index_view_name : string;
  index_selector : string;
  index_action : string option;
  index_processor : index_processor;
  index_view_path_options : path_options;
  index_view_sort_options : sort_options option;
  max_items : int option;
}

type index_entry = {
  index_entry_url: string;
  index_entry_page_file: string;
  index_entry_nav_path: string list;
  fields : (string * Ezjsonm.value) list;
}

type index = index_entry list

(* A page "template" in soupault's terminology is an HTML skeleton,
   not a Jingoo template.
   There can be multiple templates for different pages or sections.
 *)
type page_template = {
  template_name : string;
  template_data : string;
  template_path_options : path_options;
  template_content_selector : string option;
  template_content_action : string option;
}

(* Soupault configuration. *)
type settings = {
  (* Show build progress. *)
  verbose : bool;

  (* Show debug information. *)
  debug : bool;

  (* HTML doctype to insert in generated pages. *)
  doctype : string;

  (* Whether to keep the doctype if a page already has one. *)
  keep_doctype : bool;

  (* Where generated pages are saved. *)
  build_dir : string;

  (* Where to look for page source files. *)
  site_dir : string;

  (* Page source file to use for section index, without extension. *)
  index_page : string;

  (* Generated section index file name. *)
  index_file : string;

  (* Default HTML page template. *)
  default_template : string;

  (* Default template source string (not a file path). *)
  default_template_source : string;

  (* What to do with the content. *)
  default_content_action : string;

  (* Alternative templates for specific pages. *)
  page_templates : page_template list;

  (* Element where page content is inserted in the template. *)
  default_content_selector : string;

  (* Use clean URLs if true (mirror the site dir structure exactly when false). *)
  clean_urls : bool;

  (* Whether to add a trailing slash to clean URLs.
     Many web servers redirect https://example.com/foo to https://example.com/foo/
     so URLs without trailing slashes can slow down page loading
     due to the time required to handle an HTTP redirect
     and may negatively impact search engine optimization.
     Soupault now adds a trailing slash by default,
     but gives the user an option to disable that.
    *)
  clean_url_trailing_slash : bool;

  (* What files to consider pages rather than assets. *)
  page_extensions : string list;

  (* Extensions for files to be processed by the built-in Markdown parser.
     If an extension is in this list, the file is processed
     by the built-in Markdown implementation
     and is not considered for external preprocessors.

     The list is empty by default,
     so that people can choose to use the built-in parser
     or an external preprocessor.
   *)
  markdown_extensions : string list;

  (* Files to ignore completely. *)
  ignore_extensions : string list;
  ignore_path_regexes: string list;
  ignore_directories: string list;

  (* Extensions to keep intact when generating pages from content files.
     That's for people who want to use Markdown etc. _without_ also using clean URLs,
     so that about.htm remains about.htm, but contact.md becomes contact.html
   *)
  keep_extensions : string list;

  (* Extension to use for pages whose content file extension is _not_ in the keep_extensions list.
     E.g. a user has site/index.md, and it becomes build/index.html,
     while site/about.html can stay build/about.html
   *) 
  default_extension : string;

  (* HTML files considered complete pages rather than content files.
     Normally those that have an <html> element in them.
   *)
  complete_page_selector : string;

  (* If set to false, soupault doesn't use or require a page template,
     but treats everything as a complete page. *)
  generator_mode : bool;

  (* Build "profiles" specified from the CLI with --profile
     E.g. "dev" or "production".
     Widgets can be restricted to specific profiles.
   *)
  build_profiles : string list;

  (* Save site metadata to a JSON file. *)
  dump_index_json : string option;

  (* The content model.
     Starting from 2.0.0 soupault doesn't have a built-in content model,
     users need to explicitly configure metadata field names
     and extraction rules (CSS selectors and extraction options).
   *)
  index_fields : index_field list;

  (* Widgets may generate data useful as metadata.
     In that case metadata extraction should be scheduled after those widgets have run.
   *)
  index_extract_after_widgets : string list;

  (* Strip HTML tags from extracted metadata. *)
  index_strip_tags : bool;

  (* Index views define different ways to present the metadata on site. *)
  index_views : index_view list;
  index_path_options : path_options;
  index_profile : string option;
  index_date_input_formats : string list;
  index_force : string list;
  index_leaf_file: string option;

  index_sort_options : sort_options;

  (* Page preprocessors convert other formats to HTML. *)
  page_preprocessors : (string * string) list;

  (* Asset processors that manipulate static asset files. *)
  asset_processors : (string * template) list;

  plugin_dirs : string list;
  plugin_discovery: bool;

  caching: bool;
  cache_dir : string;

  force : bool;

  page_character_encoding : Markup.Encoding.t;

  pretty_print_html : bool;

  soupault_version : string option;
}

(* The global state of soupault as a whole. *)
type state = {
  (* The settings, for internal use.
   *)
  soupault_settings: settings;

  (* The config with defaults mixed in,
     for plugins and hooks.
   *)
  soupault_config: Otoml.t;

  site_index: index_entry list;
}

(* Default values *)

let config_file = "soupault.toml"
let config_file_alt = "soupault.conf"
let config_path_env_var = "SOUPAULT_CONFIG"
let page_hash_file = ".page_source_hash"

let default_path_options = {
  pages = [];
  sections = [];
  regexes = [];
  pages_exclude = [];
  sections_exclude = [];
  regexes_exclude = [];
  include_subsections = false;
}

let default_sort_options = {
  sort_by = None;
  sort_type = Calendar;
  sort_strict = false;
  sort_descending = true;
}

let default_settings = {
  verbose = false;
  debug = false;
  doctype = "<!DOCTYPE html>";
  keep_doctype = false;
  build_dir = "build";
  site_dir = "site";
  index_page = "index";
  index_file = "index.html";
  default_template = "templates/main.html";
  default_template_source = "";
  default_content_action = "append_child";
  page_templates = [];
  default_content_selector = "body";
  clean_urls = true;
  clean_url_trailing_slash = true;
  page_extensions = ["htm"; "html"];
  markdown_extensions = [];
  ignore_extensions = [];
  ignore_path_regexes = [];
  ignore_directories = [];
  default_extension = "html";
  keep_extensions = ["html"; "htm"];
  complete_page_selector = "html";
  generator_mode = true;
  build_profiles = [];
  dump_index_json = None;
  index_extract_after_widgets = [];
  index_fields = [];
  index_strip_tags = false;
  index_views = [];
  index_path_options = default_path_options;
  index_profile = None;
  index_date_input_formats = ["%F"];
  index_force = [];
  index_leaf_file = None;

  index_sort_options = default_sort_options;

  page_preprocessors = [];
  asset_processors = [];

  plugin_dirs = ["plugins"];
  plugin_discovery = true;

  caching = true;
  cache_dir = ".soupault-cache";

  force = false;

  page_character_encoding = Markup.Encoding.utf_8;

  pretty_print_html = true;

  soupault_version = None;
}

(* Common exceptions and error helpers. *)

(* Indicates an unrecoverable website processing error.
   Such errors always stop the build.

   This exception is handled in the outermost layer of soupault.ml
   and shouldn't be caught anywhere else.
   More specific exceptions listed below should be re-raised as [Soupault_error]
   if they are not recoverable.
 *)
exception Soupault_error of string

let soupault_error s = raise (Soupault_error s)

(* Indicates an unrecoverable error in soupault's own logic:
   unimplemented edge case, broken invariant etc.

   It MUST NOT be ever handled so that the user can get a full exception trace
   and either debug the problem or report it to the maintainers.
 *)
exception Internal_error of string

let internal_error err =
  let () =
    Logs.err @@ fun m -> m "soupault encountered an internal error: %s." err;
    if not (Printexc.backtrace_status ()) then
      (* --debug or debug=true in the config enable exception trace recording early in the startup process.
         If exception trace recording isn't enabled, it likely means soupault is not running with debug on
         (or there's a logic error in initialization ;).
       *)
      Logs.err @@ fun m ->
        m "You can run soupault --debug to get an exception trace. Please report a bug and attach the trace."
    else
      Logs.err @@ fun m ->
        m "Please report a bug and attach the message and the exception trace to your report."
  in raise (Internal_error err)

(* Indicates that soupault encountered a file name
   that is impossible in the operating system it's running on.

   When it occurs inside soupault's own code (as opposed to plugin code),
   it should always be re-raised as [Internal_error].

   When it occurs in plugin code, it must be re-raised as [Plugin_error].
 *)
exception Malformed_file_name of string

(* Indicates a configuration error.

   If it occurs while executing a widget,
   it must be re-raised as [Widget_error].
 *)
exception Config_error of string

let config_error msg = raise (Config_error msg)

(* Indicates an error during plugin execution.

   Must be re-raised as [Widget_error]
   if it occurs during widget plugin execution,
   or as [Soupault_error] if it occurs in hooks, etc.
 *)
exception Plugin_error of string

let plugin_error err = raise (Plugin_error err)

(* Indicates an error during widget execution.

   Must be re-raised as [Soupault_error]
   by the widget handling function,
   with information about the widget that failed.
 *)
exception Widget_error of string

let widget_error err = raise (Widget_error err)

(* Shared data *)

(* A hash table where the startup hook can insert data
   that other plugins and hooks can then read.
 *)
let global_data : (string, Ezjsonm.value) Hashtbl.t = Hashtbl.create 1024
